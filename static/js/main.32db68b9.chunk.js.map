{"version":3,"sources":["reducers.js","serviceWorker.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","index.js"],"names":["INITIAL_STATE_SEARCH","searchField","INITIAL_STATE_ROBOTS","isPending","robots","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","Header","className","React","PureComponent","Card","name","email","id","alt","src","CardList","map","robot","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","hasError","info","this","setState","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","message","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.32db68b9.chunk.js","sourcesContent":["import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILURE\n} from './constants'\n\nconst INITIAL_STATE_SEARCH = {\n  searchField: ''\n}\n\nexport const searchRobots = (state = INITIAL_STATE_SEARCH, action) => {\n  switch(action.type){\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload })\n    default:\n      return state\n  }\n}\n\nconst INITIAL_STATE_ROBOTS = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = INITIAL_STATE_ROBOTS, action={}) => {\n  switch(action.type){\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\n    case REQUEST_ROBOTS_FAILURE:\n      return Object.assign({}, state, { error: action.payload, isPending: false })\n    default:\n      return state\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\n\nclass Header extends React.PureComponent{\n  render(){\n  return <h1 className='f1'>RoboFriends</h1>\n  }\n}\nexport default Header","import React from 'react'\n\nconst Card = ({ name, email, id }) =>{\n  return(\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${ id }?size=200x200`}/>\n      <div>\n        <h2>{ name }</h2>\n        <p>{ email }</p>\n      </div>\n    </div>\n  )\n}\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots })=>{\n  return(\n    <div>\n      { \n        robots.map( robot => {\n          return(\n            <Card key={ robot.id } id={ robot.id } name={ robot.name } email={ robot.email} />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({ searchChange })=>{\n  return(\n    <div className='pa2'>\n      <input \n        aria-label=\"Search Robots\"\n        className='pa3 ba b--green bg-lightest-blue' \n        type='search' \n        placeholder='Search Robots' \n        onChange={searchChange}\n      />\n    </div>\n  )\n}\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props)=>(\n  <div style={{overflowY:'scroll', border:'5px solid black', height:'500px'}}>\n    { props.children }\n  </div>\n)\n\nexport default Scroll","import React from 'react'\n\nclass ErrorBoundary extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      hasError: false\n    }\n  }\n  componentDidCatch(error, info){\n    this.setState({ hasError: true})\n  }\n  render(){\n    if(this.state.hasError){\n      return <h1>Oops. System Error!</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React from 'react'\nimport { connect } from 'react-redux'\nimport Header from '../components/Header'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions'\n\nclass App extends React.Component{\n  \n  componentDidMount(){\n    this.props.onRequestRobots()\n  }\n  render(){\n    const { searchField, onSearchChange, robots, isPending } = this.props\n    const filteredRobots = robots.filter( robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? (<h1>Loading...</h1>) :  \n            <ErrorBoundary>\n              <CardList robots={ filteredRobots } />\n            </ErrorBoundary> }\n        </Scroll>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error\n})\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: ( event ) => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILURE\n} from './constants'\n\nexport const setSearchField = text =>({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (\n  (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then( response => response.json() )\n    .then( data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch( error => dispatch({ type: REQUEST_ROBOTS_FAILURE, payload: error.message }))\n})","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILURE = 'REQUEST_ROBOTS_FAILURE'","import React from 'react';\n// import './wdyr.js'\nimport ReactDOM from 'react-dom';\nimport { createLogger } from 'redux-logger'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { searchRobots, requestRobots } from './reducers'\nimport * as serviceWorker from './serviceWorker'\nimport './index.css'; \nimport App from './containers/App'\nimport 'tachyons'\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.register()"],"sourceRoot":""}